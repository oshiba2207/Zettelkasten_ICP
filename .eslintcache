[{"/home/simon/Simian/reactjs/zettelkasten/client/src/index.js":"1","/home/simon/Simian/reactjs/zettelkasten/client/src/App.js":"2","/home/simon/Simian/reactjs/zettelkasten/client/src/reportWebVitals.js":"3","/home/simon/Simian/reactjs/zettelkasten/client/src/components/OwnNavbar.js":"4","/home/simon/Simian/reactjs/zettelkasten/client/src/components/NoteGrid.js":"5","/home/simon/Simian/reactjs/zettelkasten/client/src/components/ModalLaunch.js":"6","/home/simon/Simian/reactjs/zettelkasten/client/src/components/Note.js":"7","/home/simon/Simian/reactjs/zettelkasten/client/src/components/ModalLaunchHook.js":"8","/home/simon/Simian/reactjs/zettelkasten/client/src/components/HashTag.js":"9","/home/simon/Simian/reactjs/zettelkasten/client/src/components/ModalLaunchEdit.js":"10","/home/simon/Simian/reactjs/zettelkasten/client/src/components/LoginButton.js":"11"},{"size":457,"mtime":1612528298066,"results":"12","hashOfConfig":"13"},{"size":2392,"mtime":1613327871986,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1612103466508,"results":"15","hashOfConfig":"16"},{"size":4588,"mtime":1612540052333,"results":"17","hashOfConfig":"13"},{"size":1245,"mtime":1612528846712,"results":"18","hashOfConfig":"13"},{"size":2986,"mtime":1612532809803,"results":"19","hashOfConfig":"13"},{"size":2880,"mtime":1613220071077,"results":"20","hashOfConfig":"13"},{"size":1886,"mtime":1612103466552,"results":"21","hashOfConfig":"13"},{"size":414,"mtime":1612103466588,"results":"22","hashOfConfig":"13"},{"size":5728,"mtime":1613214613071,"results":"23","hashOfConfig":"13"},{"size":324,"mtime":1612103466544,"results":"24","hashOfConfig":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1avedyg",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tk47og",{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"27"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"27"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/home/simon/Simian/reactjs/zettelkasten/client/src/index.js",[],["57","58"],"/home/simon/Simian/reactjs/zettelkasten/client/src/App.js",["59"],"import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport OwnNavbar from './components/OwnNavbar.js';\nimport './App.css';\nimport NoteGrid from './components/NoteGrid';\n/* import LoginButton from './components/LoginButton';\nimport LogoutButton from './components/LoginButton';\nimport { useAuth0 } from '@auth0/auth0-react'; */\n\n\nfunction App() {\n  const [items, setItems] = useState([]);\n  //const [query, setQuery] = useState('')\n  const [tags, setTags] = useState([]);\n  const [tagList, setTagList] = useState([]);\n  const [filteredItems, setFilteredItems] = useState([]);\n  const [tagsNotes, setTagsNotes] = useState([]);\n  const pfad = \"https://ec2-3-249-53-237.eu-west-1.compute.amazonaws.com/\";\n  const [load, setLoad] = useState(false);\n /*  const { isLoading } = useAuth0(); */\n \n  \n\n  const getNotes = () => {\n    fetch(pfad + ':3001')\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        setTagsNotes(data);\n        const itemsGroupedByNoteID = groupItemsByID(data, \"noteid\");\n        setFilteredItems(itemsGroupedByNoteID);  \n        setItems(itemsGroupedByNoteID); \n      })\n  } \n\n\n  \n  //Group item-Array\n\n  const groupItemsByID = (data, noteid) => {\n    const unique = data.map(e => e[noteid])\n      .map((e,i,final) => final.indexOf(e) === i && i)\n      .filter((e) => data[e]).map(e=> data[e]);\n    return unique;\n  };\n  useEffect(() => {\n    function getTags() {\n      fetch(pfad + ':3001/tags')\n      //fetch('http://192.198.1.99:3001/tags')\n        .then(response => {\n          return response.json();\n        })\n        .then(data => {\n          setTags(data)\n        });\n    }\n    getTags();\n  }, [tagList]);\n\n  /* if (isLoading) return <div>Loading...</div> */\n\n  return (\n    <div className=\"App\">\n     {/*  <LoginButton /> */}\n     \n      <OwnNavbar pfad={pfad} load={load} setLoad={setLoad} tags={tags} filteredItems={filteredItems} reloadItems={getNotes} items={items} setFilteredItems={setFilteredItems} getNotes={getNotes} hashtags={tagsNotes}/>\n      <div>\n        {/* {(load) ? (  */}\n        <NoteGrid pfad={pfad} className=\"NoteGrid\" getNotes={getNotes} items={filteredItems} setFilteredItems={setFilteredItems} hashtags={tagsNotes} tags={tags}/>\n     {/*    ) : (<h1>nothing to see</h1>\n          )\n        } */}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/simon/Simian/reactjs/zettelkasten/client/src/reportWebVitals.js",[],"/home/simon/Simian/reactjs/zettelkasten/client/src/components/OwnNavbar.js",["60","61","62"],"import React, { useState, useEffect } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ModalLaunch from './ModalLaunch';\nimport Modal from 'react-bootstrap/Modal';\n/* import { useAuth0 } from \"@auth0/auth0-react\"; */\n\n\nconst OwnNavbar = ({ tags, getNotes, load, setLoad, items, setFilteredItems, hashtags, pfad}) => {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [showNewTag, setShowNewTag] = useState(false);\n  const [neuesTag, setNeuesTag] = useState(\"\");\n  const [tagList, setTagList] = useState(tags);\n  const [tagFilter, setTagFilter] = useState(\"\");\n  const handleModal2Close = () => setShowNewTag(false);\n  const handleModal2Show = () => setShowNewTag(true);\n/*   const { user, isAuthenticated } = useAuth0(); */\n\n  const loadHandler = () => {\n    setLoad(!load);\n    console.log(load);\n  }\n\n  useEffect(() => {\n    getNotes();\n  }, []);\n\n  React.useEffect(() => {\n    setTagList(tags)\n  }, [tags], [tagList])\n\n  useEffect(() => {\n    setFilteredItems(items.filter((item)=>item.notetext.toLowerCase().includes(searchInput.toLowerCase()) || item.notename.toLowerCase().includes(searchInput.toLowerCase())))\n   /*  if(!load){\n      setLoad(true)\n    } */\n  },[searchInput]);\n\n  useEffect(() => {\n    setFilteredItems(filterByTag(tagFilter))\n  }, [tagFilter])\n\n  const filterByTag = (tagFilter) => {\n    return hashtags.filter((item) => item.tagname.toLowerCase().includes(tagFilter.toLowerCase()))\n  }\n\n  const dropdownFilterHandler = (filter) => {\n    setTagFilter(filter.target.text.substring(1))\n    if(!load){\n      setLoad(true)\n    }\n  }\n\n  const searchFilterHandler = (e) => {\n    setSearchInput(e.target.value)\n    if (!load) {\n      setLoad(true)\n    }\n  }\n  \n  function newTag() {\n    fetch(pfad + ':3001/newTag', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ neuesTag }),\n    })\n      .then(response => {\n        return response.text()\n      })\n      .then(response => {\n        fetch(pfad + ':3001/tags')\n          .then(response => {\n            return response.json();\n          })\n          .then(data => {\n            setTagList(data)\n          });\n      })\n  }\n\n    return(\n    /*   isAuthenticated && (  */\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">Zettelkasten</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n            <ModalLaunch tags={tags} setFilteredItems={setFilteredItems} getNotes={getNotes} pfad={pfad}/>\n              <NavDropdown title=\"Tags\" id=\"basic-nav-dropdown\">\n              {tagList.map(tag => (\n                <NavDropdown.Item key={tag.tagid} value={tag.tagid} onClick={dropdownFilterHandler}>#{tag.tagname}</NavDropdown.Item>\n               /*  <NavDropdown.Item key={tag.tagid} value={tag.tagid} onClick={e => setTagFilter(tag.tagname)}>#{tag.tagname}</NavDropdown.Item> */\n              ))} \n                    <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\" onClick={handleModal2Show}>New Tag</NavDropdown.Item>\n              <Modal show={showNewTag} onHide={handleModal2Close}>\n                <Modal.Header>\n                  <Form inline>\n                    <FormControl type=\"text\" placeholder=\"new Tag\" value={neuesTag} onChange={e => setNeuesTag(e.target.value)} />\n                  </Form>\n                </Modal.Header>\n                <Modal.Footer>\n                  <Button variant=\"secondary\" onClick={handleModal2Close}>\n                    Close\n                </Button>\n                  <Button variant=\"primary\" onClick={newTag}>\n                    Save new Tag\n                </Button>\n                </Modal.Footer>\n              </Modal>\n              </NavDropdown>\n            <Button onClick={loadHandler}>Show all</Button>\n            </Nav>\n            <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" onChange={searchFilterHandler} value={searchInput}/>\n            {/* <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" onChange={(e) => setSearchInput(e.target.value)} value={searchInput} /> */}\n            </Form>\n            </Navbar.Collapse>\n        </Navbar>\n    /*   )     */      \n    )\n}\n\nexport default OwnNavbar;","/home/simon/Simian/reactjs/zettelkasten/client/src/components/NoteGrid.js",["63","64"],"import React from 'react'\nimport Note from './Note';\n//import { Container, Col, Row } from 'react-bootstrap';\nimport { Container, Flex, Spinner, VStack } from \"@chakra-ui/core\";\n\nconst NoteGrid = ({ items, hashtags, tags, getNotes, setFilteredItems, pfad }) => {\n\n    const filterByTagNote = (tagFilter) => {\n        return hashtags.filter((item) => item.tagname.toLowerCase().includes(tagFilter.toLowerCase()))\n    }\n\n    return(\n       /*  <Container fluid=\"md\">\n            <Row>\n                {items.map(item=>(\n                    <Col lg={6} md={6} xs={12} key={item.noteid} >\n                        <Note item={item} hashtags={hashtags} tags={tags} pfad={pfad} filterByTagNote={filterByTagNote} setFilteredItems={setFilteredItems} getNotes={getNotes}></Note>\n                    </Col>\n            ))}\n            </Row>\n        </Container> */\n        <Container maxW=\"md\" centerContent p={8}>\n        <VStack spacing={8} w=\"100%\">\n          {items.map((item) => (\n              <Note item={item} key={item.noteid} hashtags={hashtags} tags={tags} pfad={pfad} filterByTagNote={filterByTagNote} setFilteredItems={setFilteredItems} getNotes={getNotes}/>\n          ))}\n        </VStack>\n      </Container>\n    )\n}\nexport default NoteGrid\n","/home/simon/Simian/reactjs/zettelkasten/client/src/components/ModalLaunch.js",["65"],"import React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\n\nfunction ModalLaunch({ tags, setFilteredItems, getNotes, pfad }) {\n  const [tagList, setTagList] = useState(tags);\n  const [show, setShow] = useState(false);\n  const [noteName, setNoteName] = useState(\"\");\n  const [noteText, setNoteText] = useState(\"\");\n  const [tag, setTag] = useState(\"\");\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n\n  React.useEffect(() => {\n    setTagList(tags)\n  },[tags],[tagList])\n\n  const handleSave = (e) => {\n    setNoteName(noteName);\n    setNoteText(noteText);\n    setTag(tag);\n    createNote(noteName, noteText, tag);\n  }\n  function createNote() {\n    fetch(pfad + ':3001/notes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ noteName, noteText, tag }),\n    })\n      .then(response => {\n        getNotes();\n        setShow(false);\n      })\n      .then(\n        setShow(false)\n      )\n  }\n\n\n  const addTag = (e) => {\n    addAdditionalTag(tag)\n  }\n\n  function addAdditionalTag(tag){\n    fetch(pfad + ':3001/addTag', {\n      method: \"POST\",\n      headers:{\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({tag, noteName}),\n    })\n    .then(response => {\n      getNotes();\n    })\n  }\n\n  \n\n\n\n  function noteTextChange(e){\n    e.preventDefault();\n    setNoteText(e.target.value)\n  }\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        New Note\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header>\n          <Form inline>\n            <FormControl type=\"text\" placeholder=\"Note Title\" className=\"mr-sm-2\" value={noteName} onChange={e => setNoteName(e.target.value)}/>\n          </Form>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <textarea rows={10} cols={40} placeholder=\"Note Text\" className=\"mr-sm-2\" value={noteText} onChange={noteTextChange}/>\n          </Form>\n          \n            {/* <TagDropdown tags={tags} value={tag} onChange={e => setTag(e.target.value)}/> */}\n          <select onChange={e => setTag(e.target.value)}>\n            <option key=\"\" value=\"\">Select Tag</option>\n            {tagList.map(tag => (\n              <option key={tag.tagid} value={tag.tagid} >#{tag.tagname}</option>\n            ))}            \n          </select>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            Save Note\n          </Button>\n          <Button variant=\"primary\" onClick={addTag}>\n            Add another tag\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default ModalLaunch;","/home/simon/Simian/reactjs/zettelkasten/client/src/components/Note.js",["66","67","68","69","70","71"],"import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport HashTag from './HashTag'\n//import Moment from 'moment';\nimport Button from 'react-bootstrap/Button';\nimport ModalLaunchEdit from './ModalLaunchEdit';\nimport ModalLaunchHook from './ModalLaunchHook';\n//import { Container, Col, Row } from 'react-bootstrap';\nimport { Box, HStack, Text } from \"@chakra-ui/core\";\n\nconst Note = ({ item, hashtags, tags, getNotes, setFilteredItems, filterByTagNote, pfad}) => {\n  /*   const formatedDate = Moment(item.notecreated).format('DD-MM-YYYY'); */\n    const [noteid, setNoteid] = useState(item.noteid);\n    const noteHashTags = [...hashtags];\n    //const [imgSource, setImgSource] = useState(pfad + \"/zettelkasten/uploads/\" + item.fileurl);\n    const [imgSource, setImgSource] = useState(\"https://oshiba2207-team-bucket.storage.fleek.co/\" + item.ipfshash);\n    //const [imgSource, setImgSource] = useState(\"http://simian.sytes.net/zettelkasten/files/zettelkasten/uploads/\" + item.fileurl);\n  /*   if (imgSource == 'http://simian.sytes.net/zettelkasten/uploads/null'){\n        setImgSource('http://simian.sytes.net:3001/zettelkasten/uploads/canvas2.png');\n    }  */\n    const relHashtags = noteHashTags.filter(hashs => hashs.noteid === item.noteid);\n    const deleteHandle = (e) => {\n        deleteNote(noteid);\n    }\n\n    const filterByTag = (tagFilter) => {\n        return hashtags.filter((item) => item.tagname.toLowerCase().includes(tagFilter.toLowerCase()))\n    }\n\n    const deleteNote = (noteid) => {\n        \n        fetch(pfad + ':3001/deleteNote/' + noteid, {\n            method: \"DELETE\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ noteid }),\n        })\n            .then(response => {\n                getNotes();                \n            })\n    }\n\n    return(\n    <HStack key={item.noteid} w=\"100%\" alignItems=\"flex-start\">\n      <Box bg=\"gray.100\" p={4} rounded=\"md\" w=\"100%\">\n                <Text \n                    fontSize=\"3xl\"\n                    fontWeight=\"extrabold\">{item.notename}</Text>\n        <Text>{item.notetext}</Text>\n                <a href={imgSource}\n                    target=\"_blank\">\n                    <img\n                        src={imgSource}\n                        loading=\"lazy\"\n                        alt=\"\">\n                    </img>\n                </a>\n                <ModalLaunchEdit tags={tags} item={item} getNotes={getNotes} pfad={pfad} />\n                <Button size=\"sm\" style={{ margin: 10 }} variant=\"danger\" onClick={deleteHandle} value={item.noteid}>Del</Button>\n                {relHashtags.map((hashtag, i) => (\n                    <HashTag hashtag={relHashtags[i]} filterByTagNote={filterByTagNote} key={hashtag.linkid} />\n                ))}\n      </Box>\n    </HStack>\n   \n    )\n}\n\nexport default Note;","/home/simon/Simian/reactjs/zettelkasten/client/src/components/ModalLaunchHook.js",["72","73","74","75","76","77"],"import React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\n\nfunction ModalLaunchHook({noteid}) {\n  const [show, setShow] = useState(false);\n  //const [nets,setNets] = useState([]);\n  const [noteid2, setNoteid2] = useState([]);\n  const handleClose = () => {\n    setShow(false);\n  }\n  \n  const handleShow = () => { \n    getNets(noteid);\n    setShow(true);\n    console.log(noteid2)\n  }\n    /* useEffect(() => {\n        getNets(noteid1);\n    }, []);*/\n\n    const getNets = (noteid) => {\n        fetch('http://192.168.1.99:3001/nets', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ noteid }),\n        })\n            .then(response => {\n                //console.log(response)\n                setNoteid2(response)\n            })\n    }\n\n  return (\n    <>\n\n          <small \n            className=\"rounded-circle\" \n            style={{ \n              padding: \"4px\", \n              color: \"black\", \n              backgroundColor: \"white\", \n              position: \"absolute\", \n              right: \"30px\" \n              }} \n              onClick={handleShow}\n              value = {noteid} \n             >\n              {noteid}\n          </small>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header>\n             \n        </Modal.Header>\n        <Modal.Body>\n          \n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n      \n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default ModalLaunchHook;","/home/simon/Simian/reactjs/zettelkasten/client/src/components/HashTag.js",["78","79"],"import React, { useState, useEffect } from 'react';\n\nconst HastTag = ({ hashtag}) => {\n    const [tagFilter, setTagFilter] = useState(\"\");\n\n    const handleTagFilter = () => {\n       console.log(hashtag.tagname)\n       setTagFilter(hashtag.tagname)\n    }\n\n    return(\n    <div className=\"hashTag\">\n            <small onClick={handleTagFilter}>#{hashtag.tagname}</small>\n    </div>\n    )\n}\n\nexport default HastTag;\n","/home/simon/Simian/reactjs/zettelkasten/client/src/components/ModalLaunchEdit.js",["80","81","82","83","84"],"import React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { ToastContainer, toast } from 'react-toastify';\nimport axios from 'axios';\n\nfunction ModalLaunchEdit({ tags, setFilteredItems, getNotes, item, pfad }) {\n  const [tagList, setTagList] = useState(tags);\n  const [show, setShow] = useState(false);\n  const [noteName, setNoteName] = useState(item.notename);\n  const [noteText, setNoteText] = useState(item.notetext);\n  const [tag, setTag] = useState(\"\");\n  const [noteid, setNoteid] = useState(item.noteid);\n  const [selectedFile, setSelectedFile] = useState();\n  const [filename, setFilename] = useState(\"\");\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  React.useEffect(() => {\n    setTagList(tags)\n  },[tags],[tagList])\n\n  const handleSave = (e) => {\n    setNoteName(noteName);\n    setNoteText(noteText);\n    setTag(tag);\n    changeNote(noteName, noteText);\n  }\n  function changeNote() {\n    fetch(pfad + ':3001/changeNote', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ noteName, noteText, noteid }),\n    })\n      .then(response => {\n        getNotes();\n      })\n  }\n\n  const addTag = (e) => {\n    addAdditionalTag(tag, noteid);\n  }\n\n  function addAdditionalTag(tag, noteid){\n    //const tagNumber = Number(tag);\n    fetch(pfad + ':3001/addTag', {\n      method: \"POST\",\n      headers:{\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ tag, noteid}),\n    })\n    .then(response => {\n      getNotes();\n    })\n  }\n\n  function newTag(){\n    let neuesTag = prompt(\"Enter new Tag:\");\n    \n    fetch(pfad + ':3001/newTag', {\n      method: \"POST\",\n      headers:{\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({neuesTag}),\n    })\n    .then(response => {\n      return response.text()\n    })\n    .then(response => {\n      fetch(pfad + ':3001/tags')\n        .then(response => {\n          return response.json();\n        })\n        .then(data => {\n          setTagList(data)\n        });\n    })\n  }\n\n  function noteTextChange(e){\n    e.preventDefault();\n    setNoteText(e.target.value)\n  }\n\n  const FileUploadOnChangeHandler = event => {\n    const file = event.target.files[0];\n    setFilename(file.name);\n    console.log(file);\n    if (validateSize(event)) {\n      // if return true allow to setState\n      setSelectedFile(file);\n    }\n  }\n  const fileUploadHandler = () => {\n    const data = new FormData()\n    console.log(selectedFile);\n    data.append('file', selectedFile)\n    data.append('noteid', noteid);\n    console.log(data);\n    axios.post(pfad + \":3001/upload\", data)\n      .then(res => { // then print response status\n        toast.success('upload success')\n      })\n      .then(res => {\n        fetch(pfad + ':3001/uploads/file', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ filename, noteid }),\n        })\n      })\n      .then(res => {\n        fetch(pfad + ':3001/upload_ipfs/file', {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ filename, noteid }),\n        })\n      })\n      .catch(err => { // then print response status\n        toast.error('upload fail')\n      })\n\n  };\n  const validateSize = (event) => {\n    let file = event.target.files[0];\n    let size = 30000;\n    let err = '';\n    if (file.size > size) {\n      err = file.type + 'is too large, please pick a smaller file\\n';\n      toast.error(err);\n    }\n    return true\n  };\n\n  return (\n    <>\n      <Button size=\"sm\" variant=\"primary\" onClick={handleShow}>\n        Edit\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header>\n          <Form inline>\n            <input type=\"text\" value={noteName} className=\"mr-sm-2\" onChange={e => setNoteName(e.target.value)} />\n          </Form>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <textarea rows={10} cols={35} className=\"mr-sm-2\" value={noteText} onChange={e => setNoteText(e.target.value)} />\n          </Form>\n          \n            {/* <TagDropdown tags={tags} value={tag} onChange={e => setTag(e.target.value)}/> */}\n          <select onChange={e => setTag(e.target.value)} >\n            <option key=\"\" value=\"\">Select Tag</option>\n            {tagList.map(tag => (\n              <option key={tag.tagid} value={tag.tagid} >#{tag.tagname}</option>\n            ))}\n            <option key=\"0\" value=\"0\" onClick={newTag}>Create new tag</option>\n          </select>\n          <form method=\"post\" action=\"#\" id=\"#\">\n            <div className=\"form-group files\">\n              <label>Upload Your File </label>\n              <input type=\"file\" name=\"file\" className=\"form-control\" onChange={FileUploadOnChangeHandler} />\n            </div>\n            <div className=\"col-md-6 pull-right\">\n              <button width=\"100%\" type=\"button\" className=\"btn btn-info\" onClick={fileUploadHandler}>Upload File</button>\n            </div>\n          </form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleSave}>\n            Save Changes\n          </Button>\n          <Button variant=\"primary\" onClick={addTag}>\n            Add another tag\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default ModalLaunchEdit;","/home/simon/Simian/reactjs/zettelkasten/client/src/components/LoginButton.js",[],["85","86"],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":15,"column":19,"nodeType":"93","messageId":"94","endLine":15,"endColumn":29},{"ruleId":"95","severity":1,"message":"96","line":30,"column":6,"nodeType":"97","endLine":30,"endColumn":8,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":41,"column":5,"nodeType":"97","endLine":41,"endColumn":18,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"101","line":45,"column":6,"nodeType":"97","endLine":45,"endColumn":17,"suggestions":"102"},{"ruleId":"91","severity":1,"message":"103","line":4,"column":21,"nodeType":"93","messageId":"94","endLine":4,"endColumn":25},{"ruleId":"91","severity":1,"message":"104","line":4,"column":27,"nodeType":"93","messageId":"94","endLine":4,"endColumn":34},{"ruleId":"91","severity":1,"message":"105","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"106","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":12},{"ruleId":"91","severity":1,"message":"107","line":7,"column":8,"nodeType":"93","messageId":"94","endLine":7,"endColumn":23},{"ruleId":"91","severity":1,"message":"108","line":13,"column":20,"nodeType":"93","messageId":"94","endLine":13,"endColumn":29},{"ruleId":"91","severity":1,"message":"109","line":16,"column":23,"nodeType":"93","messageId":"94","endLine":16,"endColumn":35},{"ruleId":"91","severity":1,"message":"110","line":26,"column":11,"nodeType":"93","messageId":"94","endLine":26,"endColumn":22},{"ruleId":"111","severity":1,"message":"112","line":51,"column":17,"nodeType":"113","endLine":52,"endColumn":37},{"ruleId":"91","severity":1,"message":"105","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"114","line":4,"column":8,"nodeType":"93","messageId":"94","endLine":4,"endColumn":12},{"ruleId":"91","severity":1,"message":"115","line":5,"column":8,"nodeType":"93","messageId":"94","endLine":5,"endColumn":19},{"ruleId":"91","severity":1,"message":"116","line":6,"column":10,"nodeType":"93","messageId":"94","endLine":6,"endColumn":24},{"ruleId":"91","severity":1,"message":"117","line":6,"column":26,"nodeType":"93","messageId":"94","endLine":6,"endColumn":31},{"ruleId":"91","severity":1,"message":"118","line":7,"column":8,"nodeType":"93","messageId":"94","endLine":7,"endColumn":13},{"ruleId":"91","severity":1,"message":"105","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"119","line":4,"column":12,"nodeType":"93","messageId":"94","endLine":4,"endColumn":21},{"ruleId":"91","severity":1,"message":"105","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"115","line":5,"column":8,"nodeType":"93","messageId":"94","endLine":5,"endColumn":19},{"ruleId":"91","severity":1,"message":"116","line":6,"column":10,"nodeType":"93","messageId":"94","endLine":6,"endColumn":24},{"ruleId":"91","severity":1,"message":"108","line":15,"column":18,"nodeType":"93","messageId":"94","endLine":15,"endColumn":27},{"ruleId":"91","severity":1,"message":"120","line":86,"column":12,"nodeType":"93","messageId":"94","endLine":86,"endColumn":26},{"ruleId":"87","replacedBy":"121"},{"ruleId":"89","replacedBy":"122"},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'setTagList' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNotes'. Either include it or remove the dependency array. If 'getNotes' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["125"],"React Hook useEffect has missing dependencies: 'items' and 'setFilteredItems'. Either include them or remove the dependency array. If 'setFilteredItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["126"],"React Hook useEffect has missing dependencies: 'filterByTag' and 'setFilteredItems'. Either include them or remove the dependency array. If 'setFilteredItems' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["127"],"'Flex' is defined but never used.","'Spinner' is defined but never used.","'useEffect' is defined but never used.","'Card' is defined but never used.","'ModalLaunchHook' is defined but never used.","'setNoteid' is assigned a value but never used.","'setImgSource' is assigned a value but never used.","'filterByTag' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'Form' is defined but never used.","'FormControl' is defined but never used.","'ToastContainer' is defined but never used.","'toast' is defined but never used.","'axios' is defined but never used.","'tagFilter' is assigned a value but never used.","'noteTextChange' is defined but never used.",["123"],["124"],"no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [getNotes]",{"range":"134","text":"135"},"Update the dependencies array to be: [items, searchInput, setFilteredItems]",{"range":"136","text":"137"},"Update the dependencies array to be: [filterByTag, setFilteredItems, tagFilter]",{"range":"138","text":"139"},[1109,1111],"[getNotes]",[1433,1446],"[items, searchInput, setFilteredItems]",[1520,1531],"[filterByTag, setFilteredItems, tagFilter]"]